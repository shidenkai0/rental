// Package gen provides boilerplate primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BasicAuthScopes = "BasicAuth.Scopes"
)

// Car defines model for Car.
type Car struct {
	Id       int64  `json:"id"`
	Make     string `json:"make"`
	Model    string `json:"model"`
	RenterId int    `json:"renter_id"`
	Year     int    `json:"year"`
}

// CreateUpdateCarRequest defines model for CreateUpdateCarRequest.
type CreateUpdateCarRequest struct {
	Make  string `json:"make"`
	Model string `json:"model"`
	Year  int    `json:"year"`
}

// CreateUpdateCustomerRequest defines model for CreateUpdateCustomerRequest.
type CreateUpdateCustomerRequest struct {
	Name string `json:"name"`
}

// Customer defines model for Customer.
type Customer struct {
	Id   int64  `json:"id"`
	Name string `json:"name"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError = ErrorResponse

// Unauthorized defines model for Unauthorized.
type Unauthorized = ErrorResponse

// UpdateCarJSONBody defines parameters for UpdateCar.
type UpdateCarJSONBody = Car

// RentCarParams defines parameters for RentCar.
type RentCarParams struct {
	// ID of the customer to rent the car to
	CustomerId int64 `form:"customerId" json:"customerId"`
}

// UpdateCustomerJSONBody defines parameters for UpdateCustomer.
type UpdateCustomerJSONBody = CreateUpdateCustomerRequest

// CreateCarJSONRequestBody defines body for CreateCar for application/json ContentType.
type CreateCarJSONRequestBody = CreateUpdateCarRequest

// UpdateCarJSONRequestBody defines body for UpdateCar for application/json ContentType.
type UpdateCarJSONRequestBody = UpdateCarJSONBody

// CreateCustomerJSONRequestBody defines body for CreateCustomer for application/json ContentType.
type CreateCustomerJSONRequestBody = CreateUpdateCustomerRequest

// UpdateCustomerJSONRequestBody defines body for UpdateCustomer for application/json ContentType.
type UpdateCustomerJSONRequestBody = UpdateCustomerJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new car
	// (POST /car)
	CreateCar(ctx echo.Context) error
	// Deletes a car
	// (DELETE /car/{carId})
	DeleteCar(ctx echo.Context, carId int64) error
	// Find car by ID
	// (GET /car/{carId})
	GetCarById(ctx echo.Context, carId int64) error
	// Updates a car
	// (PUT /car/{carId})
	UpdateCar(ctx echo.Context, carId int64) error
	// Rent a car
	// (GET /car/{carId}/rent)
	RentCar(ctx echo.Context, carId int64, params RentCarParams) error
	// Create a new customer
	// (POST /customer)
	CreateCustomer(ctx echo.Context) error
	// Deletes a customer
	// (DELETE /customer/{customerId})
	DeleteCustomer(ctx echo.Context, customerId int64) error
	// Find customer by ID
	// (GET /customer/{customerId})
	GetCustomerById(ctx echo.Context, customerId int64) error
	// Updates a customer
	// (PUT /customer/{customerId})
	UpdateCustomer(ctx echo.Context, customerId int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateCar converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCar(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCar(ctx)
	return err
}

// DeleteCar converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCar(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "carId" -------------
	var carId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "carId", runtime.ParamLocationPath, ctx.Param("carId"), &carId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter carId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCar(ctx, carId)
	return err
}

// GetCarById converts echo context to params.
func (w *ServerInterfaceWrapper) GetCarById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "carId" -------------
	var carId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "carId", runtime.ParamLocationPath, ctx.Param("carId"), &carId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter carId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCarById(ctx, carId)
	return err
}

// UpdateCar converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCar(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "carId" -------------
	var carId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "carId", runtime.ParamLocationPath, ctx.Param("carId"), &carId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter carId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCar(ctx, carId)
	return err
}

// RentCar converts echo context to params.
func (w *ServerInterfaceWrapper) RentCar(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "carId" -------------
	var carId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "carId", runtime.ParamLocationPath, ctx.Param("carId"), &carId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter carId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RentCarParams
	// ------------- Required query parameter "customerId" -------------

	err = runtime.BindQueryParameter("form", true, true, "customerId", ctx.QueryParams(), &params.CustomerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customerId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RentCar(ctx, carId, params)
	return err
}

// CreateCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCustomer(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCustomer(ctx)
	return err
}

// DeleteCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCustomer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "customerId" -------------
	var customerId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "customerId", runtime.ParamLocationPath, ctx.Param("customerId"), &customerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customerId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCustomer(ctx, customerId)
	return err
}

// GetCustomerById converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomerById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "customerId" -------------
	var customerId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "customerId", runtime.ParamLocationPath, ctx.Param("customerId"), &customerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customerId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomerById(ctx, customerId)
	return err
}

// UpdateCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCustomer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "customerId" -------------
	var customerId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "customerId", runtime.ParamLocationPath, ctx.Param("customerId"), &customerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customerId: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCustomer(ctx, customerId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/car", wrapper.CreateCar)
	router.DELETE(baseURL+"/car/:carId", wrapper.DeleteCar)
	router.GET(baseURL+"/car/:carId", wrapper.GetCarById)
	router.PUT(baseURL+"/car/:carId", wrapper.UpdateCar)
	router.GET(baseURL+"/car/:carId/rent", wrapper.RentCar)
	router.POST(baseURL+"/customer", wrapper.CreateCustomer)
	router.DELETE(baseURL+"/customer/:customerId", wrapper.DeleteCustomer)
	router.GET(baseURL+"/customer/:customerId", wrapper.GetCustomerById)
	router.PUT(baseURL+"/customer/:customerId", wrapper.UpdateCustomer)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZ3W7jNhN9FYLfd6mV5GxaoAIKNH8tDBTtIukiKLJGMZHGNlOJVEjKqRPo3QuSkiVZ",
	"juMklrcFitzEFDlnOHNm5lh+orHIcsGRa0WjJyrxvkClT0XC0C6cSQSNZyDNh1hwjVybfyHPUxaDZoIH",
	"d0pws6biOWZg/vu/xCmN6P+CxnrgnqqgsViWZenVCIXSIsO9w9RmSwcmUeWCK3e3MdcoOaRXKBcoL6QU",
	"+4O31i4rNGqxE1SxZLkxRqMVOFEWnaCFLz36mUOh50KyR0wO6c4CUpaQWGKCXDNIFfXoHCFBaYN1fX39",
	"4aTQc/MwBo1dbORFRqMbegqKxUQipNn3X+glKi1ZrDH5QunEo3qZI42oWeSzOiWVi5Zsjma5FDlKXTGQ",
	"2SjgX5DlKdJo5NGpkBloGlHG9bfHdGWXcY0ztEHM4E/sHKO/iaXQQHtOeDQTCabdzb+DZGrTXokmbX/0",
	"feq7sER3m9Wuo3D0XX+jNXpfMGmyfWNuW3nfBqudrKw2oRS3dxhr2pTRpggOFYy33bC63K4XavWF7q04",
	"ZGu3+sQeH4GcC+w7u+aDPbsR9Fm4N9HwPT7atD/raLeg+ylHpWC2hm1bDElQA0vVi/i1iT66KVqMC8n0",
	"8soUr4O0pW86xKozmDO3ZrXBmmudu/bD+FTU7Q1i294wA5aaTXDHMuQis38/zMyyH4uM9rrWJXINKTn5",
	"NKYeTVmMVTBc3OlJDvEcyZEfUo8WMq0ciILg4eHBB/vUF3IWVEdV8PP47OKXq4sPR37oz3WWGkjNtA3f",
	"FTNxJB3MBUrlXBn5oR+a7SJHDjmjEf3oh/4R9WgOem5DFMRVeQplL2wyZrv5OKFRq4K91hxePtfaO6O6",
	"PVXXptxRONrfUHVTez0NZyDN4ACNiYE/DsPDDy7G80I79NHzIaviEnSGbOnRb5zL2w9t0gu2GIosA7lc",
	"pZAA4fhAYptJDTNlysl8mpjdhgTBUwxynJQGM8EU3Tjt0uHcrjs65CAhQ21H8c3ThuizhGhBKlOmuGhk",
	"aVe3kIhaQNoucS0L9FppeLGflZMetY7dDdbdcY4kb07H8XOGudBkKgq+z6S5QCsCaxmDJGNc0Unp0Rnq",
	"vj+XqAvJzTnF+CzF6ng3iz+hPgN5urSx35rG8TkRU2PDZFJa24fMZHiIJrFK3T+fFT8ynths3C7J+Hwz",
	"LUzH6dXt5zyBneq2lfA5aMIRE2Vyf4uksDaSgfPfGTH7TH35ddhVRY2oIo5RqWmRpsv3ku0wQ2woEjsu",
	"bmlta/MokNVdq4bXZbZRPjvzWs+xaWZcD0dlbwt+peZrJ1pO1f7cFyiXLYeqE4cblfZL3nt64sfNdgsO",
	"C2Ap3KZIpsLhQHrwNmo48wL92l+5tgnjet/b1fHqZdCQErn1xqlX5jUf/xPLPbHcZHelmOulLk+Cp6ZI",
	"dxHQjeHtKrrOzQ5S+rBNonZsGFFdWx9YWffT+3p53djoa+zq2SuEdmc2bFHbwyU7PGzTGUJ8D8kep8Br",
	"hDfK8B2rf50TrxPke6XIAKq8/1PI1+biv1iqD0n5ll7f0jDbL2Atl1uvXm8mhkXuNyVH9Oa9p4qCwMlA",
	"P8tQKT/BRbAYUXOiAlmvi1/rmlKkkZOVmoaUOJf8phQqH8tJ+XcAAAD//+iJyCZaHAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
